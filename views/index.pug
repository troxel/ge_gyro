extends layout

block content
  .container
    .form
      .row 
        .col
          div#hdg_plot.border(style="height:300px")
      .row.mt-2 
        .col
          div#rp_plot.border(style="height:175px")
      .row(style="margin:40px")
        .col-4
          table.table.table-success.table-striped-columns
            tr
              td.hdr(colspan='2') Current Attitude
                a.ms-5(href='#', style='font-size: 70%;align:right;', onclick='copyToClipboard()') &UpperRightArrow;
                span#clipboard_txt(style='display:none;')
            tr.data_row
              td.lbl Roll
              td#roll.data_cell
            tr.data_row
              td.lbl Pitch
              td#pitch.data_cell
            tr.data_row
              td.lbl Heading
              td#hdg_true.data_cell
            tr.data_row
              td.lbl Point to Point
              td#p2p.data_cell
            tr.data_row
              td.lbl Average
              td#ave.data_cell

        .col-4       
          table.table.table-success.table-striped-columns
            tr
              td.hdr(colspan='2') GyroCompass Status
            tr.data_row
              td.lbl GC Countdown
              td#gc_time.data_cell
            tr
              td#gc_mode_str(colspan='2')
            tr.data_row
              td.lbl Time Update
              td#update_time_fmt.data_cell
            tr.data_row
              td.lbl Date Update
              td#update_date_fmt.data_cell
            tr.data_row
              td.lbl Update Status
              td#update_status.data_cell

        .col-4        
            | Plot Time Window
            br
            select(name='rng_win' onchange='this.form.submit();')
              option(value='.5') .5
              option(value='1' selected='selected') 1
              option(value='5') 5
              option(value='10') 10
              option(value='30') 30
              option(value='60') 60
              option(value='90') 90
            |   Minutes
            hr
            button#pauseUpdate(type='button' style='background-color: red; color: white;' onclick='pauseUpdate()') Pause Update

  script.

    var timeoutId = 0
    var pauseFlg = false

    const repRate = 1000

    const host = window.location.hostname
    const proto = window.location.protocol
    const port = window.location.port
    const url_srv = `${proto}//${host}:${port}`;

    const url_xhr = `${url_srv}/xhr`;
  
    DH = dataXhrHdlr()

    // Add plot handler function to dataXhrHdlr
    DH.plot = function(pData){ 

      // No data don't attempt to plot
      if ( pData.hdg.length === 0 ) {
        $('#hdg_plot').html('<h1>No data For Time Span</h1>')
        $('#rp_plot').html('<h1>No data For Time Span</h1>')
        return
      } else {
        $('#hdg_plot').html('')
        $('#rp_plot').html('')
      }

      var layout = {
        showlegend: true,
        xaxis: {
          autorange: true,
          showline: false,
          showgrid: false, 
          zeroline: false, 
          visible: false,  
        },
        yaxis: {
          rangemode: 'tozero',
          title:{text:"Degrees"},
          autorange: true
        },
        margin: {
          b: 18,
          t: 15,
          pad: 0,
        },
        plot_bgcolor: 'lightblue',
      }  
 
      //console.log(pData.hdg)

      const hdg_plot = {
              x: pData.timeSeries,
              y: pData.hdg,
              name: "Hdg ",
              mode: 'lines+markers',
              type: 'scatter',               
      }

      Plotly.newPlot('hdg_plot', [hdg_plot], layout);

      layout.xaxis['showline'] = true
      layout.xaxis['showgrid'] = true 
      layout.xaxis['zeroline'] = true 
      layout.xaxis['visible'] = true  
      //layout.xaxis['title'] = {text:"Time",title_font_color:"black",size:12}
      layout.plot_bgcolor = 'lightgreen'

      const pitch_plot = {
              x: pData.timeSeries,
              y: pData.pitch,
              name: "Pitch",
              mode: 'lines+markers',
              type: 'scatter'
      }

      const roll_plot = {
              x: pData.timeSeries,
              y: pData.roll,
              name: "Roll",
              mode: 'lines+markers',
              type: 'scatter'
      }

      Plotly.newPlot('rp_plot', [pitch_plot, roll_plot], layout);
    
    }

    const rtn = get_xhr_data(url_xhr,DH)

    // Function to handle the data received from the server
    function get_xhr_data(url_xhr,DH) {
  
      //console.log(timeoutId)

      const rngWin = $('select[name="rng_win"]').val();

      $.ajax({
        url: url_xhr,
        type: 'GET', // or 'POST' if you prefer
        data: { rng_win: rngWin },
        success: function(data){ 

            if ( data['error'] ) {
              console.error(this.url_xhr, this.textStatus, data['error']);
              return;
            }

            //console.log(data)

            //spinner(data.time)

            hdg_stats = get_hdg_stats(data.plot.hdg);
            data.innerHTML['p2p'] = hdg_stats.p2p;
            data.innerHTML['ave'] = hdg_stats.ave;

            DH.process(data)
        },
        complete: function(){
          if (timeoutId !== 0) {
            clearTimeout(timeoutId) 
            //const rngWin = $('select[name="rng_win"]').val();
          }

          if ( pauseFlg ) {
            timeoutId = 0;
          } else {
            timeoutId = setTimeout(get_xhr_data, repRate, url_xhr, DH);
          }

        },
        error: function (jqXhr, textStatus, errorMessage) {
            console.error('Ajax Error! ' + errorMessage);
            //spinnerX()
        },
        timeout:70000,
        dataType: 'json'        
      })
    }
    
    // ------------------------
    // -- set blank plot layout
    // ------------------------
    function no_data_layout() {
      return {
        "xaxis": {
            "visible": false
        },
        "yaxis": {
            "visible": false
        },
        "annotations": [
            {
                "text": "No matching data found",
                "xref": "paper",
                "yref": "paper",
                "showarrow": false,
                "font": {
                    "size": 28
                }
            }
        ]
      }
    }    

    // ------------------------
    // -- get stats
    // ------------------------
    function get_hdg_stats(hdg_data) {
  
      var hdg_vec = []; 
          
      var len = hdg_data.length;
      //DumperAlert(len);
      
      var hdg_stats = {};
      hdg_stats["sum"] = 0;
      hdg_stats["min"] = 1000;
      hdg_stats["max"] = -1000;
      hdg_stats["ave"] = 0;
      for (var i = 0; i < len ; i++) {

        hdg_vec[i] = hdg_data[i]; 
                
        hdg_stats["sum"] = hdg_stats["sum"] + hdg_vec[i];
        if ( hdg_vec[i] < hdg_stats["min"] ) { hdg_stats["min"] = hdg_vec[i]  } 
        if ( hdg_vec[i] > hdg_stats["max"] ) { hdg_stats["max"] = hdg_vec[i]  } 
      }
      
      hdg_stats["ave"] = (hdg_stats["sum"] / hdg_vec.length).toFixed(2);
      hdg_stats["p2p"] = (hdg_stats["max"] - hdg_stats["min"]).toFixed(2);
  
      return(hdg_stats);
   
    }
    
    // ----------------------
    // -- Event handlers ----
    // ----------------------
    function pauseUpdate() {
      const button = document.getElementById('pauseUpdate');
      const body = document.body;
      if (timeoutId !== 0) {
        clearTimeout(timeoutId);
        timeoutId = 0;
        pauseFlg = true;
        body.style.backgroundColor = "lightgray";
        button.textContent = "Resume Update";
        button.style.backgroundColor = "green";
      } else {
        timeoutId = setTimeout(get_xhr_data, repRate, url_xhr, DH);
        pauseFlg = false;
        button.textContent = "Pause Update";
        body.style.backgroundColor = "white";
        button.style.backgroundColor = "red";
      }
    }

    function copyToClipboard() {
      const textToCopy = document.getElementById('clipboard_txt').textContent;
      //alert(textToCopy);
      // Use the Clipboard API to copy text to clipboard
      if (navigator.clipboard && navigator.clipboard.writeText) {
        navigator.clipboard.writeText(textToCopy).then(() => {
          //alert('Text copied to clipboard!');
        }).catch(err => {
          console.error('Failed to copy text: ', err);
        });
      } else {
        const textarea = document.createElement('textarea');
        textarea.value = textToCopy;
        document.body.appendChild(textarea);
        textarea.select();
        try {
          document.execCommand('copy');
          //alert('Text copied to clipboard!');
        } catch (err) {
          console.error('Fallback: Failed to copy text: ', err);
        }
        document.body.removeChild(textarea);
      }
    }